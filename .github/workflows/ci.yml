name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  GO_VERSION: '1.21'
  ANTLR_VERSION: '4.13.1'

jobs:
  # Single change detection job for all workflows
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      go-files: ${{ steps.final-decision.outputs.go-files || 'false' }}
      has-changes: ${{ steps.changes.outputs.has-changes || 'false' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect file changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          go-files:
            - '**/*.go'
            - 'go.mod'
            - 'go.sum'
            - 'tools/grammar/**'
          makefile-changes:
            - 'Makefile'
          has-changes:
            - '**'
            
    - name: Set up Go (for change detection)
      if: steps.changes.outputs.makefile-changes == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Analyze Makefile changes for Go relevance
      id: makefile-analysis
      if: steps.changes.outputs.makefile-changes == 'true'
      run: .github/scripts/utils/makefile-analysis.sh
        
    - name: Final Go files decision
      id: final-decision  
      run: .github/scripts/utils/final-go-decision.sh "${{ steps.changes.outputs.go-files || 'false' }}" "${{ steps.makefile-analysis.outputs.go-related || 'false' }}"

  # Parallel job: Build & Basic Tests
  build-and-test:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Cache Go modules
    - name: Cache Go modules
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    # Cache ANTLR installation
    - name: Cache ANTLR
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      id: antlr-cache
      uses: actions/cache@v4
      with:
        path: /usr/local/lib/antlr.jar
        key: ${{ runner.os }}-antlr-${{ env.ANTLR_VERSION }}
        
    - name: Install ANTLR
      if: ${{ needs.detect-changes.outputs.go-files == 'true' && steps.antlr-cache.outputs.cache-hit != 'true' }}
      env:
        ANTLR_VERSION: ${{ env.ANTLR_VERSION }}
      run: .github/scripts/build/install-antlr.sh
        
    - name: Setup ANTLR binary
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/build/setup-antlr-binary.sh
        
    - name: Install Go dependencies
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/utils/install-go-deps.sh
        
    # Cache parser generation
    - name: Cache generated parsers
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      id: parser-cache
      uses: actions/cache@v4
      with:
        path: tools/gen/
        key: ${{ runner.os }}-parser-${{ hashFiles('tools/grammar/**') }}
        
    - name: Generate parsers
      if: ${{ needs.detect-changes.outputs.go-files == 'true' && steps.parser-cache.outputs.cache-hit != 'true' }}
      run: .github/scripts/build/generate-parsers.sh
        
    - name: Run Go tests
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/test/run-tests.sh
        
    - name: Build Go project
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/build/build-project.sh

  # Parallel job: Coverage Analysis
  test-coverage:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    steps:
    - name: Checkout code with history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Skip when no Go changes
      if: ${{ needs.detect-changes.outputs.go-files == 'false' }}
      run: |
        echo "⏭️ Skipping coverage analysis - no Go file changes detected"
        echo "Changes detected: ${{ needs.detect-changes.outputs.has-changes }}"
        
    - name: Set up Go
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Cache Go modules
    - name: Cache Go modules
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Install Go dependencies
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/utils/install-go-deps.sh
        
    - name: Install coverage tools
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/test/install-coverage-tools.sh
        
    - name: Run Go tests with coverage
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/test/run-coverage-full.sh
        
    - name: Calculate coverage
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      id: coverage
      run: .github/scripts/test/simple-coverage-check.sh
        
    - name: Comment coverage report on PR
      if: ${{ always() && needs.detect-changes.outputs.go-files == 'true' && github.event_name == 'pull_request' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: .github/scripts/test/post-coverage-comment.sh
    
    - name: Fail build if coverage below threshold
      if: ${{ needs.detect-changes.outputs.go-files == 'true' && steps.coverage.outputs.coverage-status == 'failed' }}
      run: |
        echo "❌ Build failed due to insufficient test coverage"
        echo "Current coverage: ${{ steps.coverage.outputs.coverage }}%"
        echo "Required threshold: 85%"
        echo "Please add tests to improve coverage before merging"
        exit 1

    - name: Upload coverage artifacts
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      uses: actions/upload-artifact@v5
      with:
        name: coverage-report
        path: |
          coverage/
          coverage-report.md
        retention-days: 30

  # Parallel job: Linting & Quality
  lint-and-quality:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Skip when no Go changes
      if: ${{ needs.detect-changes.outputs.go-files == 'false' }}
      run: |
        echo "⏭️ Skipping linting and quality checks - no Go file changes detected"
        echo "Changes detected: ${{ needs.detect-changes.outputs.has-changes }}"
      
    - name: Set up Go
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Cache Go modules
    - name: Cache Go modules
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Install Go dependencies
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/utils/install-go-deps.sh
        
    # Cache linting tools
    - name: Cache linting tools
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      uses: actions/cache@v4
      with:
        path: ~/go/bin
        key: ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-lint
        
    - name: Install Go linting tools
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: .github/scripts/lint/install-go-linting-tools.sh
        
    - name: Check formatting (changed files only)
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_BASE_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
      run: .github/scripts/lint/check-formatting.sh
        
    - name: Run Go linting (smart failure handling)
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_BASE_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
      run: .github/scripts/lint/run-linting.sh

  # Summary job that depends on all parallel jobs
  ci-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test, test-coverage, lint-and-quality]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Report CI Results
      run: .github/scripts/utils/generate-summary.sh "${{ needs.detect-changes.outputs.go-files }}" "${{ needs.build-and-test.result }}" "${{ needs.test-coverage.result }}" "${{ needs.lint-and-quality.result }}"
