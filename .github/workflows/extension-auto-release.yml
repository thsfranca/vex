---
name: Extension Auto Release

on:
  push:
    branches: [main]
    paths:
      - 'vscode-extension/**'

permissions:
  contents: write

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Check if package.json exists
          if [ ! -f "vscode-extension/package.json" ]; then
            echo "‚ö†Ô∏è Extension package.json not found, skipping release"
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get current version
          CURRENT_VERSION=$(jq -r '.version' vscode-extension/package.json)
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version from git history
          PREVIOUS_VERSION=""
          if git show HEAD~1:vscode-extension/package.json >/dev/null 2>&1; then
            PREVIOUS_VERSION=$(git show HEAD~1:vscode-extension/package.json | jq -r '.version' 2>/dev/null || echo "0.0.0")
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Check if versions are different
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ "$CURRENT_VERSION" != "null" ] && [ "$PREVIOUS_VERSION" != "null" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ Version changed: $PREVIOUS_VERSION -> $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No version change detected (or invalid version data)"
          fi

  auto-tag-and-release:
    needs: check-version-change
    if: needs.check-version-change.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create extension tag
        run: |
          VERSION="${{ needs.check-version-change.outputs.new-version }}"
          TAG="extension-v$VERSION"
          
          echo "üè∑Ô∏è Creating extension release tag: $TAG"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag $TAG already exists, skipping creation"
            exit 0
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            exit 1
          fi
          
          # Create and push tag
          git tag "$TAG" -m "Extension release $VERSION"
          git push origin "$TAG"
          
          echo "‚úÖ Successfully created and pushed tag: $TAG"
