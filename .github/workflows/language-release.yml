---
name: Vex Language Release (Manual + Pre-release)

on:
  push:
    tags:
      - 'v*.*.*'           # v1.0.0
      - 'v*.*.*-alpha*'    # v1.0.0-alpha.1
      - 'v*.*.*-beta*'     # v1.0.0-beta.1  
      - 'v*.*.*-rc*'       # v1.0.0-rc.1

permissions:
  contents: write

jobs:
  build-language-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Determine release type
        id: release-type
        run: |
          TAG="${{ github.ref_name }}"
          if [[ "$TAG" =~ -alpha ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release-name=Alpha Release $TAG" >> $GITHUB_OUTPUT
          elif [[ "$TAG" =~ -beta ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release-name=Beta Release $TAG" >> $GITHUB_OUTPUT
          elif [[ "$TAG" =~ -rc ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT  
            echo "release-name=Release Candidate $TAG" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "release-name=Vex $TAG" >> $GITHUB_OUTPUT
          fi

      # Future: Build transpiler when ready
      - name: Build language tools (placeholder)
        run: |
          mkdir -p dist
          echo "# Vex Language Tools - ${{ github.ref_name }}" > dist/README.md
          echo "Parser foundation complete. Transpiler coming in Phase 2." >> dist/README.md
          
          # When transpiler is ready:
          # go build -o dist/vex ./cmd/vex
# go build -o dist/vex-fmt ./cmd/fmt
          
      - name: Package examples and docs
        run: |
          tar -czf dist/vex-examples-${{ github.ref_name }}.tar.gz examples/
          tar -czf dist/vex-docs-${{ github.ref_name }}.tar.gz docs/

      - name: Get or create release
        id: get-release
        run: |
          # Try to find existing draft release
          DRAFT_RELEASE=$(gh release list --draft --limit 1 --json tagName,body,name | jq -r '.[0]')
          
          if [ "$DRAFT_RELEASE" = "null" ]; then
            RELEASE_BODY="Language Development Release - Parser Foundation Complete"
          else
            RELEASE_BODY=$(echo "$DRAFT_RELEASE" | jq -r '.body')
            DRAFT_TAG=$(echo "$DRAFT_RELEASE" | jq -r '.tagName')
            gh release delete "$DRAFT_TAG" --yes || true
          fi
          
          echo "release-body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        run: |
          PRERELEASE_FLAG=""
          if [ "${{ steps.release-type.outputs.prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          gh release create "${{ github.ref_name }}" \
            --title "${{ steps.release-type.outputs.release-name }}" \
            --notes "${{ steps.get-release.outputs.release-body }}" \
            $PRERELEASE_FLAG \
            dist/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
