---
name: Update CHANGELOG

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to add to changelog (e.g., v0.2.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-changelog:
    # Only run for main Vex releases (not extension releases)
    if: ${{ (github.event_name == 'release' && !startsWith(github.event.release.tag_name, 'extension-')) || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_BOT_TOKEN }}
          fetch-depth: 0

      - name: Get release information
        id: release-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - get release info from API
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
            RELEASE_INFO=$(gh release view "$RELEASE_TAG" --json name,body,publishedAt)
            RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
            RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')
            RELEASE_DATE=$(echo "$RELEASE_INFO" | jq -r '.publishedAt' | cut -d'T' -f1)
          else
            # Automatic trigger from release event
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            RELEASE_NAME="${{ github.event.release.name }}"
            RELEASE_BODY="${{ github.event.release.body }}"
            RELEASE_DATE=$(date +%Y-%m-%d)
          fi
          
          echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "date=$RELEASE_DATE" >> $GITHUB_OUTPUT
          
          # Save body to file for multiline content
          echo "$RELEASE_BODY" > /tmp/release_body.txt
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}

      - name: Update CHANGELOG contents
        run: |
          chmod +x .github/scripts/changelog/update-changelog.sh
          .github/scripts/changelog/update-changelog.sh \
            "${{ steps.release-info.outputs.tag }}" \
            "${{ steps.release-info.outputs.name }}" \
            "${{ steps.release-info.outputs.date }}" \
            "/tmp/release_body.txt"

      - name: Create branch and commit
        env:
          TAG: ${{ steps.release-info.outputs.tag }}
        run: |
          BRANCH="docs/update-changelog-${TAG}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b "$BRANCH"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for ${TAG}" || exit 0
          git push -u origin "$BRANCH"

      - name: Open pull request
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
          TAG: ${{ steps.release-info.outputs.tag }}
          DATE: ${{ steps.release-info.outputs.date }}
        run: |
          BRANCH="docs/update-changelog-${TAG}"
          PR_JSON=$(gh pr create \
            --title "docs: update CHANGELOG for ${TAG}" \
            --body "Add changelog entry for ${TAG} released on ${DATE}." \
            --base main \
            --head "$BRANCH" \
            --json number,url)
          echo "$PR_JSON"
          PR_NUMBER=$(echo "$PR_JSON" | jq -r '.number')
          PR_URL=$(echo "$PR_JSON" | jq -r '.url')
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "url=$PR_URL" >> $GITHUB_OUTPUT

      - name: Enable auto-merge and merge PR
        if: steps.create-pr.outputs.url != ''
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          gh pr merge "${{ steps.create-pr.outputs.url }}" --squash --auto --delete-branch
