name: Coverage

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI"]
    branches: [ main ]
    types: 
      - completed

jobs:
  # Job to detect what files changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      go-files: ${{ steps.final-decision.outputs.go-files || 'false' }}
    steps:
    - uses: actions/checkout@v5
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          go-files:
            - '**/*.go'
            - 'go.mod'
            - 'go.sum'
            - 'tools/grammar/**'
          makefile-changes:
            - 'Makefile'
            
    - name: Set up Go (for change detection)
      if: steps.changes.outputs.makefile-changes == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Analyze Makefile changes for Go relevance
      id: makefile-analysis
      if: steps.changes.outputs.makefile-changes == 'true'
      run: |
        cd tools/change-detector
        go build -o change-detector .
        output=$(./change-detector makefile-analysis)
        GO_RELATED=$(echo "$output" | grep "go-related=" | cut -d'=' -f2)
        echo "go-related=$GO_RELATED" >> $GITHUB_OUTPUT
        
    - name: Final Go files decision
      id: final-decision  
      run: |
        cd tools/change-detector
        if [ ! -f change-detector ]; then
          go build -o change-detector .
        fi
        
        BASIC_GO="${{ steps.changes.outputs.go-files || 'false' }}"
        MAKEFILE_GO="${{ steps.makefile-analysis.outputs.go-related || 'false' }}"
        
        output=$(./change-detector final-decision "$BASIC_GO" "$MAKEFILE_GO")
        GO_FILES=$(echo "$output" | grep "go-files=" | cut -d'=' -f2)
        echo "go-files=$GO_FILES" >> $GITHUB_OUTPUT

  update-coverage:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.go-files == 'true' && (github.event.workflow_run.conclusion == 'success' || github.event_name == 'push') }}
    permissions:
      contents: write  # Required to commit and push coverage updates
    
    steps:
    - uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      run: |
        go mod tidy || echo "No go.mod yet"
    
    - name: Generate Go coverage
      run: |
        cd tools/coverage-updater
        go build -o coverage-updater .
        
        # Generate coverage and capture environment variables
        output=$(./coverage-updater generate-coverage)
        echo "$output"
        
        # Extract status variables and add to environment
        echo "$output" | grep "_STATUS=" >> $GITHUB_ENV
    
    - name: Update README with coverage
      run: |
        cd tools/coverage-updater
        if [ ! -f coverage-updater ]; then
          go build -o coverage-updater .
        fi
        ./coverage-updater update-readme
    
    - name: Commit updated coverage
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No coverage changes to commit"
        else
          git add README.md
          git commit -m "Update test coverage status in README [skip ci]"
          git push
        fi
