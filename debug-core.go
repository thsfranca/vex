package main

import "fmt"

func main() {
	// Generated by Vex transpiler
	func() interface{} { add_numbers := func(x interface{}, y interface{}) interface{} { return (x + y) }; return fmt.Println("✅ defn creates working function with explicit types") }()
	_ = func() interface{} { add_numbers // Use variable to satisfy Go compiler
	func() interface{} { greet := func(name interface{}) interface{} { return name }; return fmt.Println("✅ defn works with string parameters and return types") }()
	_ = func() interface{} { greet // Use variable to satisfy Go compiler
	func() interface{} { get_constant := func() interface{} { return 42 }; return fmt.Println("✅ defn works with no-parameter functions") }()
	_ = func() interface{} { get_constant // Use variable to satisfy Go compiler
	func() interface{} { format_info := func(name interface{}, age interface{}, active interface{}) interface{} { return name }; return fmt.Println("✅ defn works with mixed parameter types") }()
	_ = func() interface{} { format_info // Use variable to satisfy Go compiler
	func() interface{} { sum_array := func(nums interface{}) interface{} { return (func() interface{} { if len(nums) > 0 { return nums[0] } else { return nil } }() + func() interface{} { if len(nums) > 1 { return nums[1] } else { return nil } }()) }; return fmt.Println("✅ defn works with array parameters") }()
	_ = func() interface{} { sum_array // Use variable to satisfy Go compiler
	func() interface{} { is_positive := func(x interface{}) interface{} { return (x > 0) }; return fmt.Println("✅ defn works with boolean return types") }()
	_ = func() interface{} { is_positive // Use variable to satisfy Go compiler
	func() interface{} { double := func(x interface{}) interface{} { return (x * 2) }; quadruple := func(x interface{}) interface{} { return double(double(x)) }; return fmt.Println("✅ defn functions can call other defn functions") }()
	_ = func() interface{} { double // Use variable to satisfy Go compiler
}
